

set(srcs-Drone
    "dronecan.remoteid.ArmStatus.c"
    "dronecan.remoteid.BasicID.c"
    "dronecan.remoteid.Location.c"
    "dronecan.remoteid.OperatorID.c"
    "dronecan.remoteid.SecureCommand_req.c"
    "dronecan.remoteid.SecureCommand_res.c"
    "dronecan.remoteid.SelfID.c"
    "dronecan.remoteid.System.c"
    "uavcan.protocol.debug.LogLevel.c"
    "uavcan.protocol.debug.LogMessage.c"
    "uavcan.protocol.dynamic_node_id.Allocation.c"
    "uavcan.protocol.dynamic_node_id.server.AppendEntries_req.c"
    "uavcan.protocol.dynamic_node_id.server.AppendEntries_res.c"
    "uavcan.protocol.dynamic_node_id.server.Discovery.c"
    "uavcan.protocol.dynamic_node_id.server.Entry.c"
    "uavcan.protocol.dynamic_node_id.server.RequestVote_req.c"
    "uavcan.protocol.dynamic_node_id.server.RequestVote_res.c"
    "uavcan.protocol.GetNodeInfo_req.c"
    "uavcan.protocol.GetNodeInfo_res.c"
    "uavcan.protocol.HardwareVersion.c"
    "uavcan.protocol.NodeStatus.c"
    "uavcan.protocol.param.Empty.c"
    "uavcan.protocol.param.ExecuteOpcode_req.c"
    "uavcan.protocol.param.ExecuteOpcode_res.c"
    "uavcan.protocol.param.GetSet_req.c"
    "uavcan.protocol.param.GetSet_res.c"
    "uavcan.protocol.param.NumericValue.c"
    "uavcan.protocol.param.Value.c"
    "uavcan.protocol.RestartNode_req.c"
    "uavcan.protocol.RestartNode_res.c"
    "uavcan.protocol.SoftwareVersion.c"
    "src/com.hex.equipment.flow.Measurement.c"
    "src/com.himark.servo.ServoCmd.c"
    "src/com.himark.servo.ServoInfo.c"
    "src/com.hobbywing.esc.GetEscID.c"
    "src/com.hobbywing.esc.GetMaintenanceInformation_req.c"
    "src/com.hobbywing.esc.GetMaintenanceInformation_res.c"
    "src/com.hobbywing.esc.GetMajorConfig_req.c"
    "src/com.hobbywing.esc.GetMajorConfig_res.c"
    "src/com.hobbywing.esc.RawCommand.c"
    "src/com.hobbywing.esc.SelfTest_req.c"
    "src/com.hobbywing.esc.SelfTest_res.c"
    "src/com.hobbywing.esc.SetAngle_req.c"
     "src/com.hobbywing.esc.SetAngle_res.c"
     "src/com.hobbywing.esc.SetBaud_req.c"
     "src/com.hobbywing.esc.SetBaud_res.c"
    "src/com.hobbywing.esc.SetDirection_req.c"
     "src/com.hobbywing.esc.SetDirection_res.c"
     "src/com.hobbywing.esc.SetID_req.c"
      "src/com.hobbywing.esc.SetID_res.c"
      "src/com.hobbywing.esc.SetLED_req.c"
       "src/com.hobbywing.esc.SetLED_res.c"
       "src/com.hobbywing.esc.SetReportingFrequency_req.c"
     "src/com.hobbywing.esc.SetReportingFrequency_res.c"
     "src/com.hobbywing.esc.SetThrottleSource_req.c"
     "src/com.hobbywing.esc.SetThrottleSource_res.c"
     "src/com.hobbywing.esc.StatusMsg1.c"
     "src/com.hobbywing.esc.StatusMsg2.c"
     "src/com.hobbywing.esc.StatusMsg3.c"
     "src/com.volz.servo.ActuatorStatus.c"
     "src/dronecan.remoteid.ArmStatus.c"
     "src/dronecan.remoteid.BasicID.c"
     "src/dronecan.remoteid.Location.c"
     "src/dronecan.remoteid.OperatorID.c"
     "src/dronecan.remoteid.SecureCommand_req.c"
     "src/dronecan.remoteid.SecureCommand_res.c"
     "src/dronecan.remoteid.SelfID.c"
     "src/dronecan.remoteid.System.c"
     "src/dronecan.sensors.hygrometer.Hygrometer.c"
     "src/dronecan.sensors.rc.RCInput.c"
     "src/uavcan.CoarseOrientation.c"
     "src/uavcan.equipment.actuator.ArrayCommand.c"
     "src/uavcan.equipment.actuator.Command.c"
     "src/uavcan.equipment.actuator.Status.c"
     "src/uavcan.equipment.ahrs.MagneticFieldStrength.c"
     "src/uavcan.equipment.ahrs.MagneticFieldStrength2.c"
     "src/uavcan.equipment.ahrs.RawIMU.c"
     "src/uavcan.equipment.ahrs.Solution.c"
     "src/uavcan.equipment.air_data.AngleOfAttack.c"
     "src/uavcan.equipment.air_data.IndicatedAirspeed.c"
     "src/uavcan.equipment.air_data.RawAirData.c"
     "src/uavcan.equipment.air_data.Sideslip.c"
     "src/uavcan.equipment.air_data.StaticPressure.c"
     "src/uavcan.equipment.air_data.StaticTemperature.c"
     "src/uavcan.equipment.air_data.TrueAirspeed.c"
     "src/uavcan.equipment.camera_gimbal.AngularCommand.c"
     "src/uavcan.equipment.camera_gimbal.GEOPOICommand.c"
     "src/uavcan.equipment.camera_gimbal.Mode.c"
     "src/uavcan.equipment.camera_gimbal.Status.c"
     "src/uavcan.equipment.device.Temperature.c"
     "src/uavcan.equipment.esc.RawCommand.c"
     "src/uavcan.equipment.esc.RPMCommand.c"
     "src/uavcan.equipment.esc.Status.c"
     "src/uavcan.equipment.gnss.Auxiliary.c"
     "src/uavcan.equipment.gnss.ECEFPositionVelocity.c"
     "src/uavcan.equipment.gnss.Fix.c"
     "src/uavcan.equipment.gnss.Fix2.c"
     "src/uavcan.equipment.gnss.RTCMStream.c"
     "src/uavcan.equipment.hardpoint.Command.c"
     "src/uavcan.equipment.hardpoint.Status.c"
     "src/uavcan.equipment.ice.FuelTankStatus.c"
     "src/uavcan.equipment.ice.reciprocating.CylinderStatus.c"
     "src/uavcan.equipment.ice.reciprocating.Status.c"
     "src/uavcan.equipment.indication.BeepCommand.c"
     "src/uavcan.equipment.indication.LightsCommand.c"
     "src/uavcan.equipment.indication.RGB565.c"
     "src/uavcan.equipment.indication.SingleLightCommand.c"
     "src/uavcan.equipment.power.BatteryInfo.c"
     "src/uavcan.equipment.power.CircuitStatus.c"
     "src/uavcan.equipment.power.PrimaryPowerSupplyStatus.c"
     "src/uavcan.equipment.range_sensor.Measurement.c"
     "src/uavcan.equipment.safety.ArmingStatus.c"
     "src/uavcan.navigation.GlobalNavigationSolution.c"
     "src/uavcan.protocol.AccessCommandShell_req.c"
     "src/uavcan.protocol.AccessCommandShell_res.c"
     "src/uavcan.protocol.CANIfaceStats.c"
     "src/uavcan.protocol.DataTypeKind.c"
     "src/uavcan.protocol.debug.KeyValue.c"
     "src/uavcan.protocol.debug.LogLevel.c"
     "src/uavcan.protocol.debug.LogMessage.c"
     "src/uavcan.protocol.dynamic_node_id.Allocation.c"
     "src/uavcan.protocol.dynamic_node_id.server.AppendEntries_req.c"
     "src/uavcan.protocol.dynamic_node_id.server.AppendEntries_res.c"
     "src/uavcan.protocol.dynamic_node_id.server.Discovery.c"
     "src/uavcan.protocol.dynamic_node_id.server.Entry.c"
     "src/uavcan.protocol.dynamic_node_id.server.RequestVote_req.c"
     "src/uavcan.protocol.dynamic_node_id.server.RequestVote_res.c"
     "src/uavcan.protocol.enumeration.Begin_req.c"
     "src/uavcan.protocol.enumeration.Begin_res.c"
     "src/uavcan.protocol.enumeration.Indication.c"
     "src/uavcan.protocol.file.BeginFirmwareUpdate_req.c"
     "src/uavcan.protocol.file.BeginFirmwareUpdate_res.c"
     "src/uavcan.protocol.file.Delete_req.c"
     "src/uavcan.protocol.file.Delete_res.c"
     "src/uavcan.protocol.file.EntryType.c"
     "src/uavcan.protocol.file.Error.c"
     "src/uavcan.protocol.file.GetDirectoryEntryInfo_req.c"
     "src/uavcan.protocol.file.GetDirectoryEntryInfo_res.c"
     "src/uavcan.protocol.file.GetInfo_req.c"
     "src/uavcan.protocol.file.GetInfo_res.c"
     "src/uavcan.protocol.file.Path.c"
     "src/uavcan.protocol.file.Read_req.c"
     "src/uavcan.protocol.file.Read_res.c"
     "src/uavcan.protocol.file.Write_req.c"
     "src/uavcan.protocol.file.Write_res.c"
     "src/uavcan.protocol.GetDataTypeInfo_req.c"
     "src/uavcan.protocol.GetDataTypeInfo_res.c"
     "src/uavcan.protocol.GetNodeInfo_req.c"
     "src/uavcan.protocol.GetNodeInfo_res.c"
     "src/uavcan.protocol.GetTransportStats_req.c"
     "src/uavcan.protocol.GetTransportStats_res.c"
     "src/uavcan.protocol.GlobalTimeSync.c"
     "src/uavcan.protocol.HardwareVersion.c"
     "src/uavcan.protocol.NodeStatus.c"
     "src/uavcan.protocol.Panic.c"
     "src/uavcan.protocol.param.Empty.c"
     "src/uavcan.protocol.param.ExecuteOpcode_req.c"
     "src/uavcan.protocol.param.ExecuteOpcode_res.c"
     "src/uavcan.protocol.param.GetSet_req.c"
     "src/uavcan.protocol.param.GetSet_res.c"
     "src/uavcan.protocol.param.NumericValue.c"
     "src/uavcan.protocol.param.Value.c"
     "src/uavcan.protocol.RestartNode_req.c"
     "src/uavcan.protocol.RestartNode_res.c"
     "src/uavcan.protocol.SoftwareVersion.c"
     "src/uavcan.Timestamp.c"
     "src/uavcan.tunnel.Broadcast.c"
     "src/uavcan.tunnel.Call_req.c"
      "src/uavcan.tunnel.Call_res.c"
      "src/uavcan.tunnel.Protocol.c"
      "src/uavcan.tunnel.SerialConfig.c"



)
set(include_dro
    "."
    "include"
    "src"
   

)
set(require

    libcanard
    libopendroneid


)

idf_component_register(SRCS 
    ${srcs-Drone}
    INCLUDE_DIRS "." ${include_dro}
    REQUIRES ${require})

